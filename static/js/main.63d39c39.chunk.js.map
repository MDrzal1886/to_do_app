{"version":3,"sources":["components/ExitBtn.js","components/AddTask.js","components/Task.js","components/TasksList.js","components/Calendar.js","AppContext.js","components/NavButton.js","components/Navigation.js","App.js","reportWebVitals.js","index.js"],"names":["ExitBtn","func","clear","added","handleExitBtn","useContext","AppContext","className","onClick","AddTask","addPanelActive","setTasks","setAddPanelActive","clickedDate","setDayTasksPanelActive","todayDate","setClickedDate","calendarPanelActive","useState","titleInputValue","setTitleInputValue","dateInputValue","setDateInputValue","descriptionInputValue","setDescriptionInputValue","titleValidate","setTitleValidate","dateValidate","setDateValidate","taskAdded","setTaskAdded","containerRef","useRef","useEffect","current","scrollTo","top","behavior","clearInputs","fromOrMessage","onSubmit","event","preventDefault","newTask","id","Date","now","toString","Math","random","substr","toUpperCase","title","date","description","prev","setTimeout","type","placeholder","value","onChange","target","min","icon","faPlusCircle","ref","Task","task","editMode","setEditMode","editTitle","setEditTitle","editDate","setEditDate","editDescription","setEditDescription","handleDelateBtn","tasks","listPanelActive","sortTasksFunc","length","editTask","editTasks","map","tasksSort","sort","a","b","faEdit","faTrashAlt","TasksList","setListPanelActive","tasksElements","Calendar","setCalendarPanelActive","dayTasksPanelActive","dayTasks","setDayTasks","calendarRef","calendarApi","getApi","today","filter","dayTasksElements","dayTasksElement","showOrHideDayTaskPanel","overFlow","dayMaxEventRows","views","dayGridMonth","dayMaxEvents","plugins","dayGridPlugin","interactionPlugin","initialView","events","dateClick","info","dateStr","fixedWeekCount","weekNumberCalculation","eventBackgroundColor","eventBorderColor","contentHeight","eventTextColor","headerToolbar","start","center","end","createContext","AppProvider","children","tzoffset","getTimezoneOffset","localISOTime","toISOString","slice","split","setTodayDate","sampleDate","daysAdded","sampleDateTask","setDate","getDate","buttonTypes","component","active","faClipboardList","faCalendar","toLowerCase","Provider","tasksAfterDelate","handleNavButtonClick","NavButton","navButton","Navigation","navButtons","App","window","onresize","document","body","height","innerHeight","width","innerWidth","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"kNAyBeA,EArBC,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,KAAMC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,MACtBC,EAAkBC,qBAAWC,GAA7BF,cAER,OACE,wBACEG,UAAU,aACVC,QAAS,WACPJ,EAAcH,GACVC,GACFA,IAEEC,GACFA,GAAM,IARZ,gBCkJWM,EAlJC,WACd,MASIJ,qBAAWC,GARbI,EADF,EACEA,eACAC,EAFF,EAEEA,SACAC,EAHF,EAGEA,kBACAC,EAJF,EAIEA,YACAC,EALF,EAKEA,uBACAC,EANF,EAMEA,UACAC,EAPF,EAOEA,eACAC,EARF,EAQEA,oBAGF,EAA8CC,mBAAS,IAAvD,mBAAOC,EAAP,KAAwBC,EAAxB,KACA,EAA4CF,mBAAS,IAArD,mBAAOG,EAAP,KAAuBC,EAAvB,KACA,EAA0DJ,mBAAS,IAAnE,mBAAOK,EAAP,KAA8BC,EAA9B,KACA,EAA0CN,oBAAS,GAAnD,mBAAOO,EAAP,KAAsBC,EAAtB,KACA,EAAwCR,oBAAS,GAAjD,mBAAOS,EAAP,KAAqBC,EAArB,KACA,EAAkCV,oBAAS,GAA3C,mBAAOW,EAAP,KAAkBC,EAAlB,KAEMC,EAAeC,iBAAO,MAE5BC,qBAAU,WACRF,EAAaG,QAAQC,SAAS,CAC5BC,IAAK,EACLC,SAAU,aAEX,CAAC3B,IAEJuB,qBAAU,WACJpB,GAAeI,EACjBK,EAAkBT,GACRI,GACVK,EAAkBP,KAEnB,CAACF,EAAaI,EAAqBF,IAEtC,IAUMuB,EAAc,WAClBlB,EAAmB,IACnBE,EAAkBP,GAClBS,EAAyB,IACzBE,GAAiB,GACjBE,GAAgB,IAuCZW,EAAgBV,EACpB,mCACE,mDAGF,mCACE,uBAAMW,SA1Ce,SAACC,GAExB,GADAA,EAAMC,iBACkB,KAApBvB,GAA6C,KAAnBE,EAE1BK,EADsB,KAApBP,GAMFS,EADqB,KAAnBP,OAKC,CACL,IAAMsB,EAAU,CACdC,IACEC,KAAKC,MAAMC,SAAS,IAAMC,KAAKC,SAASF,SAAS,IAAIG,OAAO,EAAG,IAC/DC,cACFC,MAAOjC,EACPkC,KAAMhC,EACNiC,YAAa/B,GAGfZ,GAAS,SAAC4C,GAAD,4BAAcA,GAAd,CAAoBZ,OAE7Bb,GAAa,GACbQ,IACAtB,EAAe,IACfF,GAAuB,GACvB0C,YAAW,WACT1B,GAAa,GACblB,GAAkB,KACjB,QAU+BL,UAAU,oBAA5C,UACE,+CACA,uBACEA,UAAS,UACPkB,GAAqC,KAApBN,EAAyB,WAAa,GADhD,kBAGTsC,KAAK,OACLC,YAAY,gBACZC,MAAOxC,EACPyC,SAAU,SAACnB,GAAD,OAAWrB,EAAmBqB,EAAMoB,OAAOF,UAGvD,uBACEpD,UAAS,UACPoB,GAAmC,KAAnBN,EAAwB,WAAa,GAD9C,kBAGToC,KAAK,OACLK,IAAK/C,EACL4C,MAAOtC,EACPuC,SAAU,SAACnB,GAAD,OAAWnB,EAAkBmB,EAAMoB,OAAOF,UAGtD,0BACEpD,UAAU,yBACVmD,YAAY,eACZC,MAAOpC,EACPqC,SAAU,SAACnB,GAAD,OAAWjB,EAAyBiB,EAAMoB,OAAOF,UAE7D,wBAAQF,KAAK,SAASlD,UAAU,wBAAhC,SACE,cAAC,IAAD,CAAiBwD,KAAMC,aAM/B,OACE,sBACEC,IAAKlC,EACLxB,UAAS,WAjGY,IAAnBG,EACK,QACqB,IAAnBA,EACF,OAEA,GA4FE,+BAFX,UAIE,cAAC,EAAD,CACET,KAAMW,EACNV,MAAOoC,EACPnC,MAAO2B,IAERS,MCtCQ2B,EAxGF,SAACC,GACZ,MAAgCjD,oBAAS,GAAzC,mBAAOkD,EAAP,KAAiBC,EAAjB,KACA,EAAkCnD,mBAASiD,EAAKf,OAAhD,mBAAOkB,EAAP,KAAkBC,EAAlB,KACA,EAAgCrD,mBAASiD,EAAKd,MAA9C,mBAAOmB,EAAP,KAAiBC,EAAjB,KACA,EAA8CvD,mBAC5CiD,EAAKb,YAAca,EAAKb,YAAc,IADxC,mBAAOoB,EAAP,KAAwBC,EAAxB,KAGA,EAOItE,qBAAWC,GANbsE,EADF,EACEA,gBACAjE,EAFF,EAEEA,SACAkE,EAHF,EAGEA,MACAC,EAJF,EAIEA,gBACA/D,EALF,EAKEA,UACAgE,EANF,EAMEA,cAGF9C,qBAAU,WACRsC,EAAaJ,EAAKf,OAClBqB,EAAYN,EAAKd,MACjBsB,EAAmBR,EAAKb,YAAca,EAAKb,YAAc,MACxD,CAACc,EAAUD,IAEdlC,qBAAU,kBAAMoC,GAAY,KAAQ,CAACS,IA4BrC,OACE,qBAAIvE,UAAU,kBAAd,UACG6D,EACC,uBACE7D,UAAS,UAAK+D,EAAUU,OAAS,EAAI,WAAa,GAAzC,mBACTvB,KAAK,OACLE,MAAOW,EACPV,SAAU,SAACnB,GAAD,OAAW8B,EAAa9B,EAAMoB,OAAOF,UAGjD,6BAAKQ,EAAKf,QAEXgB,EACC,uBACE7D,UAAS,UACPiE,EAASQ,OAAS,GAAKR,EAAWzD,EAAY,WAAa,GADpD,mBAGT0C,KAAK,OACLK,IAAK/C,EACL4C,MAAOa,EACPZ,SAAU,SAACnB,GAAD,OAAWgC,EAAYhC,EAAMoB,OAAOF,UAGhD,4BAAIQ,EAAKd,OAEVe,EACC,0BACE7D,UAAU,0BACVoD,MAAOe,EACPd,SAAU,SAACnB,GAAD,OAAWkC,EAAmBlC,EAAMoB,OAAOF,UAErDQ,EAAKb,YACP,4BAAIa,EAAKb,cACP,KACJ,sBAAK/C,UAAU,mBAAf,UACE,wBACEC,QAAS4D,EA9DQ,WACvB,IAAMa,EAAW,CACfrC,GAAIuB,EAAKvB,GACTQ,MAAOkB,EACPjB,KAAMmB,EACNlB,YAAaoB,GAEf,KAAIJ,EAAUU,OAAS,GAAKR,EAASQ,OAAS,GAAKR,EAAWzD,GAA9D,CAGE,IAAMmE,EAAYL,EAAMM,KAAI,SAAChB,GAC3B,OAAIA,EAAKvB,KAAOqC,EAASrC,GAChBuB,EAEAc,KAGLG,EAAYF,EAAUG,MAAK,SAACC,EAAGC,GAAJ,OAAUR,EAAcO,EAAGC,MAC5D5E,EAASyE,GACTf,GAAY,KAIM,WACpBA,GAAY,IAuCN9D,UAAU,oBAFZ,SAIE,cAAC,IAAD,CAAiBwD,KAAMyB,QAEzB,wBACEhF,QAAS,kBACP4D,EAAWC,GAAY,GAASO,EAAgBT,EAAKvB,KAEvDrC,UAAU,oBAJZ,SAMG6D,EAAW,IAAM,cAAC,IAAD,CAAiBL,KAAM0B,eCzDpCC,EAzCG,WAChB,MAAuDrF,qBAAWC,GAA1DwE,EAAR,EAAQA,gBAAiBD,EAAzB,EAAyBA,MAAOc,EAAhC,EAAgCA,mBAY1B5D,EAAeC,iBAAO,MAE5BC,qBAAU,WACRF,EAAaG,QAAQC,SAAS,CAC5BC,IAAK,EACLC,SAAU,aAEX,CAACyC,IAEJ,IAAMc,EAAgBf,EAAMM,KAAI,SAAChB,GAAD,OAAU,cAAC,EAAD,eAAwBA,GAAbA,EAAKvB,OAE1D,OACE,sBAAKqB,IAAKlC,EAAcxB,UAAS,WArBT,IAApBuE,EACK,QACsB,IAApBA,EACF,OAEA,GAgBwB,mBAAjC,UACE,cAAC,EAAD,CAAS7E,KAAM0F,IACdd,EAAMG,OAAS,EACd,mCACE,qBAAIzE,UAAU,qBAAd,UACE,kDACCqF,OAIL,yE,wBCmGOC,EA9HE,WACf,MAWIxF,qBAAWC,GAVbI,EADF,EACEA,eACAE,EAFF,EAEEA,kBACAK,EAHF,EAGEA,oBACA6E,EAJF,EAIEA,uBACAjB,EALF,EAKEA,MACA/D,EANF,EAMEA,uBACAiF,EAPF,EAOEA,oBACAlF,EARF,EAQEA,YACAG,EATF,EASEA,eACAD,EAVF,EAUEA,UAGF,EAAgCG,mBAAS,IAAzC,mBAAO8E,EAAP,KAAiBC,EAAjB,KAEMC,EAAclE,iBAAO,MACrBD,EAAeC,iBAAO,MAE5BC,qBAAU,WACR,IAAMkE,EAAcD,EAAYhE,QAAQkE,SACnCnF,GACHkF,EAAYE,QAEdtE,EAAaG,QAAQC,SAAS,CAC5BC,IAAK,EACLC,SAAU,aAEX,CAACpB,EAAqB8E,IASzB9D,qBAAU,WACRgE,EAAYpB,EAAMyB,QAAO,SAACnC,GAAD,OAAUA,EAAKd,OAASxC,QAChD,CAACgE,EAAOhE,IAEX,IAIM0F,EAAmBP,EAASb,KAAI,SAAChB,GAAD,OACpC,cAAC,EAAD,eAAwBA,GAAbA,EAAKvB,OAGZ4D,EAAkBT,EACtB,qCACE,6BAAKlF,IACJH,EAAiB,KAAOG,GAAeE,EACtC,wBACEP,QAbyB,WAC/BI,GAAkB,IAaZL,UAAU,0CAFZ,SAIE,cAAC,IAAD,CAAiBwD,KAAMC,QAEvB,KAEHgC,EAAShB,OAAS,EACjB,oBAAIzE,UAAU,qBAAd,SAAoCgG,IAClC1F,EAAcE,EAChB,sIAIA,mEAGF,KAEE0F,EAAyBV,EAAsB,OAAS,OACxDW,EAAWX,EAAsB,iBAAmB,GAY1D,OACE,sBACE9B,IAAKlC,EACLxB,UAAS,WAZiB,IAAxBU,EACK,QAC0B,IAAxBA,EACF,OAEA,GAOE,YAA0ByF,EAA1B,mBAFX,UAIE,cAAC,EAAD,CAASzG,KAAM6F,IACf,sBAAKvF,UAAS,UAAKkG,EAAL,mBAAd,UACE,cAAC,EAAD,CAASxG,KAAMa,IACd0F,KAEH,qBAAKjG,UAAU,oBAAf,SACE,cAAC,IAAD,CACE0D,IAAKiC,EACLS,iBAAiB,EACjBC,MAAO,CACLC,aAAc,CACZC,aAAc,IAGlBC,QAAS,CAACC,IAAeC,KACzBC,YAAY,eACZC,OAAQtC,EACRuC,UA9EgB,SAACC,GACvB,IAAMhE,EAAOgE,EAAKC,QAClBtG,EAAeqC,GACf4C,EAAYpB,EAAMyB,QAAO,SAACnC,GAAD,OAAUA,EAAKd,OAASA,MACjDvC,GAAuB,IA2EjByG,gBAAgB,EAChBC,sBAAsB,MACtBC,qBAAqB,UACrBC,iBAAiB,cACjBC,cAAc,OACdC,eAAe,QACfC,cAAe,CACbC,MAAO,YACPC,OAAQ,QACRC,IAAK,iBC5HJ1H,EAAa2H,0BA8JXC,EA5JK,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACrB,EAA4CjH,mBAAS,MAArD,mBAAOR,EAAP,KAAuBE,EAAvB,KACA,EAA8CM,mBAAS,MAAvD,mBAAO4D,EAAP,KAAwBa,EAAxB,KACA,EAAsDzE,mBAAS,MAA/D,mBAAOD,EAAP,KAA4B6E,EAA5B,KACMsC,EAA4C,KAAjC,IAAIvF,MAAOwF,oBACtBC,EAAe,IAAIzF,KAAKA,KAAKC,MAAQsF,GACxCG,cACAC,MAAM,GAAI,GACVC,MAAM,KAAK,GACd,EAAkCvH,mBAASoH,GAA3C,mBAAOvH,EAAP,KAAkB2H,EAAlB,KACMC,EAAa,SAACC,GAClB,IAAMC,EAAiB,IAAIhG,KAAK9B,GAEhC,OADA8H,EAAeC,QAAQD,EAAeE,UAAYH,GAC3CC,EAAeN,cAAcE,MAAM,KAAK,IAEjD,EAA0BvH,mBAAS,CACjC,CACE0B,GAAI,gBACJQ,MAAO,gCACPC,KAAMtC,EACNuC,YAAa,8BAEf,CACEV,GAAI,gBACJQ,MAAO,wBACPC,KAAMsF,EAAW,GACjBrF,YAAa,8BAEf,CACEV,GAAI,gBACJQ,MAAO,sBACPC,KAAMsF,EAAW,GACjBrF,YAAa,8BAEf,CACEV,GAAI,gBACJQ,MAAO,uBACPC,KAAMsF,EAAW,GACjBrF,YAAa,8BAEf,CACEV,GAAI,gBACJQ,MAAO,SACPC,KAAMsF,EAAW,GACjBrF,YAAa,gCA7BjB,mBAAOuB,EAAP,KAAclE,EAAd,KAgCA,EAAsDO,oBAAS,GAA/D,mBAAO6E,EAAP,KAA4BjF,EAA5B,KACA,EAAsCI,mBAAS,IAA/C,mBAAOL,EAAP,KAAoBG,EAApB,KAEAiB,qBAAU,WACJlB,GAAY,IAAI8B,MAAO0F,cAAcE,MAAM,KAAK,IAClDC,GAAa,IAAI7F,MAAO0F,cAAcE,MAAM,KAAK,MAElD,CAAC1H,EAAWL,EAAgBoE,EAAiB7D,IAEhD,IAAM+H,EAAc,CAClB,CACEpG,GAAI,EACJa,KAAM,MACNM,KAAMC,IACNiF,UAAW,cAAC,EAAD,IACXC,OAAQxI,GAEV,CACEkC,GAAI,EACJa,KAAM,OACNM,KAAMoF,IACNF,UAAW,cAAC,EAAD,IACXC,OAAQpE,GAEV,CACElC,GAAI,EACJa,KAAM,WACNM,KAAMqF,IACNH,UAAW,cAAC,EAAD,IACXC,OAAQjI,IAIN8D,EAAgB,SAACO,EAAGC,GAUxB,OAAO,IAAI1C,KAAKyC,EAAEjC,MAAQ,IAAIR,KAAK0C,EAAElC,QAR/BiC,EAAElC,MAAMiG,cAAgB9D,EAAEnC,MAAMiG,eAC1B,EAEN9D,EAAEnC,MAAMiG,cAAgB/D,EAAElC,MAAMiG,cAC3B,EAEF,IAKXpH,qBAAU,WACR,IAAMmD,EAAYP,EAAMQ,MAAK,SAACC,EAAGC,GAAJ,OAAUR,EAAcO,EAAGC,MACxD5E,EAASyE,KACR,CAACP,IAgCJ,OACE,cAACvE,EAAWgJ,SAAZ,CACE3F,MAAO,CACLqF,cACAtI,iBACAoE,kBACA7D,sBACA0E,qBACAG,yBACAlF,oBACAmE,gBACAF,QACAlE,WACAiE,gBA3CkB,SAAChC,GACvB,IAAM2G,EAAmB1E,EAAMyB,QAAO,SAACnC,GAAD,OAAUA,EAAKvB,KAAOA,KAC5DjC,EAAS4I,IA0CLC,qBAvCuB,SAAC/F,GAC5B,GAAIA,EACF,OAAQA,GACN,IAAK,MAGH,OAFAkC,EAAmB,MACnBG,EAAuB,MAChBlF,GAAkB,GAC3B,IAAK,OAGH,OAFAA,EAAkB,MAClBkF,EAAuB,MAChBH,GAAmB,GAC5B,IAAK,WAGH,OAFA/E,EAAkB,MAClB+E,EAAmB,MACZG,GAAuB,GAChC,QACE,SAwBFC,sBACAjF,yBACAV,cArBgB,SAACH,GACrBA,GAAK,IAqBDY,cACAG,iBACAD,aAnBJ,SAsBGoH,KC5IQsB,EAhBG,SAACC,GACjB,IAAQF,EAAyBnJ,qBAAWC,GAApCkJ,qBAER,OACE,sBAAKjJ,UAAU,qBAAf,UACE,wBACEC,QAAS,kBAAMgJ,EAAqBE,EAAUjG,OAC9ClD,UAAU,YAFZ,SAIE,cAAC,IAAD,CAAiBwD,KAAM2F,EAAU3F,SAElC2F,EAAUT,cCFFU,EAVI,WACjB,IAEMC,EAFkBvJ,qBAAWC,GAA3B0I,YAEuB7D,KAAI,SAACuE,GAAD,OACjC,cAAC,EAAD,eAAkCA,GAAlBA,EAAU9G,OAG5B,OAAO,qBAAKrC,UAAU,aAAf,SAA6BqJ,KCMvBC,MAff,WAOE,OANAC,OAAOC,SAAW,WAChBC,SAASC,KAAKC,OAASJ,OAAOK,YAC9BH,SAASC,KAAKG,MAAQN,OAAOO,YAE/BP,OAAOC,WAGL,sBAAKxJ,UAAU,YAAf,UACE,oDACA,cAAC,EAAD,QCAS+J,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,MCCdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,UACE,cAAC,EAAD,QAGJjB,SAASkB,eAAe,SAM1BZ,M","file":"static/js/main.63d39c39.chunk.js","sourcesContent":["import { useContext } from \"react\";\r\n\r\nimport { AppContext } from \"../AppContext\";\r\n\r\nconst ExitBtn = ({ func, clear, added }) => {\r\n  const { handleExitBtn } = useContext(AppContext);\r\n\r\n  return (\r\n    <button\r\n      className=\"exitButton\"\r\n      onClick={() => {\r\n        handleExitBtn(func);\r\n        if (clear) {\r\n          clear();\r\n        }\r\n        if (added) {\r\n          added(false);\r\n        }\r\n      }}\r\n    >\r\n      X\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default ExitBtn;\r\n","import { useContext, useEffect, useRef, useState } from \"react\";\r\nimport { faPlusCircle } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n\r\nimport { AppContext } from \"../AppContext\";\r\n\r\nimport ExitBtn from \"./ExitBtn\";\r\n\r\nconst AddTask = () => {\r\n  const {\r\n    addPanelActive,\r\n    setTasks,\r\n    setAddPanelActive,\r\n    clickedDate,\r\n    setDayTasksPanelActive,\r\n    todayDate,\r\n    setClickedDate,\r\n    calendarPanelActive,\r\n  } = useContext(AppContext);\r\n\r\n  const [titleInputValue, setTitleInputValue] = useState(\"\");\r\n  const [dateInputValue, setDateInputValue] = useState(\"\");\r\n  const [descriptionInputValue, setDescriptionInputValue] = useState(\"\");\r\n  const [titleValidate, setTitleValidate] = useState(false);\r\n  const [dateValidate, setDateValidate] = useState(false);\r\n  const [taskAdded, setTaskAdded] = useState(false);\r\n\r\n  const containerRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    containerRef.current.scrollTo({\r\n      top: 0,\r\n      behavior: \"smooth\",\r\n    });\r\n  }, [addPanelActive]);\r\n\r\n  useEffect(() => {\r\n    if (clickedDate && calendarPanelActive) {\r\n      setDateInputValue(clickedDate);\r\n    } else if (!calendarPanelActive) {\r\n      setDateInputValue(todayDate);\r\n    }\r\n  }, [clickedDate, calendarPanelActive, todayDate]);\r\n\r\n  const showOrHidePanel = () => {\r\n    if (addPanelActive === false) {\r\n      return \"hide\";\r\n    } else if (addPanelActive === true) {\r\n      return \"show\";\r\n    } else {\r\n      return \"\";\r\n    }\r\n  };\r\n\r\n  const clearInputs = () => {\r\n    setTitleInputValue(\"\");\r\n    setDateInputValue(todayDate);\r\n    setDescriptionInputValue(\"\");\r\n    setTitleValidate(false);\r\n    setDateValidate(false);\r\n  };\r\n\r\n  const handleAddTaskBtn = (event) => {\r\n    event.preventDefault();\r\n    if (titleInputValue === \"\" || dateInputValue === \"\") {\r\n      if (titleInputValue === \"\") {\r\n        setTitleValidate(true);\r\n      } else {\r\n        setTitleValidate(false);\r\n      }\r\n      if (dateInputValue === \"\") {\r\n        setDateValidate(true);\r\n      } else {\r\n        setDateValidate(false);\r\n      }\r\n    } else {\r\n      const newTask = {\r\n        id: (\r\n          Date.now().toString(36) + Math.random().toString(36).substr(2, 5)\r\n        ).toUpperCase(),\r\n        title: titleInputValue,\r\n        date: dateInputValue,\r\n        description: descriptionInputValue,\r\n      };\r\n\r\n      setTasks((prev) => [...prev, newTask]);\r\n\r\n      setTaskAdded(true);\r\n      clearInputs();\r\n      setClickedDate(\"\");\r\n      setDayTasksPanelActive(false);\r\n      setTimeout(() => {\r\n        setTaskAdded(false);\r\n        setAddPanelActive(false);\r\n      }, 1500);\r\n    }\r\n  };\r\n\r\n  const fromOrMessage = taskAdded ? (\r\n    <>\r\n      <h2>Zadanie dodane!</h2>\r\n    </>\r\n  ) : (\r\n    <>\r\n      <form onSubmit={handleAddTaskBtn} className=\"addPanelContainer\">\r\n        <h1>Dodaj zadanie</h1>\r\n        <input\r\n          className={`${\r\n            titleValidate && titleInputValue === \"\" ? \"validate\" : \"\"\r\n          } addPanelInput`}\r\n          type=\"text\"\r\n          placeholder=\"nazwa zadania\"\r\n          value={titleInputValue}\r\n          onChange={(event) => setTitleInputValue(event.target.value)}\r\n        />\r\n\r\n        <input\r\n          className={`${\r\n            dateValidate && dateInputValue === \"\" ? \"validate\" : \"\"\r\n          } addPanelInput`}\r\n          type=\"date\"\r\n          min={todayDate}\r\n          value={dateInputValue}\r\n          onChange={(event) => setDateInputValue(event.target.value)}\r\n        />\r\n\r\n        <textarea\r\n          className=\"addPanelInput textarea\"\r\n          placeholder=\"opis zadania\"\r\n          value={descriptionInputValue}\r\n          onChange={(event) => setDescriptionInputValue(event.target.value)}\r\n        />\r\n        <button type=\"submit\" className=\"navButton light-color\">\r\n          <FontAwesomeIcon icon={faPlusCircle} />\r\n        </button>\r\n      </form>\r\n    </>\r\n  );\r\n\r\n  return (\r\n    <div\r\n      ref={containerRef}\r\n      className={`${showOrHidePanel()} panelContainer frontZIndex`}\r\n    >\r\n      <ExitBtn\r\n        func={setAddPanelActive}\r\n        clear={clearInputs}\r\n        added={setTaskAdded}\r\n      />\r\n      {fromOrMessage}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AddTask;\r\n","import { useState, useContext, useEffect } from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faEdit } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { faTrashAlt } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nimport { AppContext } from \"../AppContext\";\r\n\r\nconst Task = (task) => {\r\n  const [editMode, setEditMode] = useState(false);\r\n  const [editTitle, setEditTitle] = useState(task.title);\r\n  const [editDate, setEditDate] = useState(task.date);\r\n  const [editDescription, setEditDescription] = useState(\r\n    task.description ? task.description : \"\"\r\n  );\r\n  const {\r\n    handleDelateBtn,\r\n    setTasks,\r\n    tasks,\r\n    listPanelActive,\r\n    todayDate,\r\n    sortTasksFunc,\r\n  } = useContext(AppContext);\r\n\r\n  useEffect(() => {\r\n    setEditTitle(task.title);\r\n    setEditDate(task.date);\r\n    setEditDescription(task.description ? task.description : \"\");\r\n  }, [editMode, task]);\r\n\r\n  useEffect(() => setEditMode(false), [listPanelActive]);\r\n\r\n  const handleEditAccept = () => {\r\n    const editTask = {\r\n      id: task.id,\r\n      title: editTitle,\r\n      date: editDate,\r\n      description: editDescription,\r\n    };\r\n    if (editTitle.length < 1 || editDate.length < 1 || editDate < todayDate)\r\n      return;\r\n    else {\r\n      const editTasks = tasks.map((task) => {\r\n        if (task.id !== editTask.id) {\r\n          return task;\r\n        } else {\r\n          return editTask;\r\n        }\r\n      });\r\n      const tasksSort = editTasks.sort((a, b) => sortTasksFunc(a, b));\r\n      setTasks(tasksSort);\r\n      setEditMode(false);\r\n    }\r\n  };\r\n\r\n  const handleEditBtn = () => {\r\n    setEditMode(true);\r\n  };\r\n  return (\r\n    <li className=\"taskListElement\">\r\n      {editMode ? (\r\n        <input\r\n          className={`${editTitle.length < 1 ? \"validate\" : \"\"} editPanelInput`}\r\n          type=\"text\"\r\n          value={editTitle}\r\n          onChange={(event) => setEditTitle(event.target.value)}\r\n        />\r\n      ) : (\r\n        <h3>{task.title}</h3>\r\n      )}\r\n      {editMode ? (\r\n        <input\r\n          className={`${\r\n            editDate.length < 1 || editDate < todayDate ? \"validate\" : \"\"\r\n          } editPanelInput`}\r\n          type=\"date\"\r\n          min={todayDate}\r\n          value={editDate}\r\n          onChange={(event) => setEditDate(event.target.value)}\r\n        />\r\n      ) : (\r\n        <p>{task.date}</p>\r\n      )}\r\n      {editMode ? (\r\n        <textarea\r\n          className=\"editPanelInput textarea\"\r\n          value={editDescription}\r\n          onChange={(event) => setEditDescription(event.target.value)}\r\n        />\r\n      ) : task.description ? (\r\n        <p>{task.description}</p>\r\n      ) : null}\r\n      <div className=\"buttonsContainer\">\r\n        <button\r\n          onClick={editMode ? handleEditAccept : handleEditBtn}\r\n          className=\"listElementButton\"\r\n        >\r\n          <FontAwesomeIcon icon={faEdit} />\r\n        </button>\r\n        <button\r\n          onClick={() =>\r\n            editMode ? setEditMode(false) : handleDelateBtn(task.id)\r\n          }\r\n          className=\"listElementButton\"\r\n        >\r\n          {editMode ? \"X\" : <FontAwesomeIcon icon={faTrashAlt} />}\r\n        </button>\r\n      </div>\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default Task;\r\n","import { useContext, useEffect, useRef } from \"react\";\r\n\r\nimport { AppContext } from \"../AppContext\";\r\nimport Task from \"./Task\";\r\nimport ExitBtn from \"./ExitBtn\";\r\n\r\nconst TasksList = () => {\r\n  const { listPanelActive, tasks, setListPanelActive } = useContext(AppContext);\r\n\r\n  const showOrHidePanel = () => {\r\n    if (listPanelActive === false) {\r\n      return \"hide\";\r\n    } else if (listPanelActive === true) {\r\n      return \"show\";\r\n    } else {\r\n      return \"\";\r\n    }\r\n  };\r\n\r\n  const containerRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    containerRef.current.scrollTo({\r\n      top: 0,\r\n      behavior: \"smooth\",\r\n    });\r\n  }, [listPanelActive]);\r\n\r\n  const tasksElements = tasks.map((task) => <Task key={task.id} {...task} />);\r\n\r\n  return (\r\n    <div ref={containerRef} className={`${showOrHidePanel()} panelContainer`}>\r\n      <ExitBtn func={setListPanelActive} />\r\n      {tasks.length > 0 ? (\r\n        <>\r\n          <ul className=\"tasksListContainer\">\r\n            <h1>Lista zadań</h1>\r\n            {tasksElements}\r\n          </ul>\r\n        </>\r\n      ) : (\r\n        <h2>Nie masz żadnych zadań :(</h2>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TasksList;\r\n","import { useContext, useState, useEffect, useRef } from \"react\";\r\n\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faPlusCircle } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nimport FullCalendar from \"@fullcalendar/react\";\r\nimport dayGridPlugin from \"@fullcalendar/daygrid\";\r\nimport interactionPlugin from \"@fullcalendar/interaction\";\r\n\r\nimport { AppContext } from \"../AppContext\";\r\n\r\nimport Task from \"./Task\";\r\nimport ExitBtn from \"./ExitBtn\";\r\n\r\nconst Calendar = () => {\r\n  const {\r\n    addPanelActive,\r\n    setAddPanelActive,\r\n    calendarPanelActive,\r\n    setCalendarPanelActive,\r\n    tasks,\r\n    setDayTasksPanelActive,\r\n    dayTasksPanelActive,\r\n    clickedDate,\r\n    setClickedDate,\r\n    todayDate,\r\n  } = useContext(AppContext);\r\n\r\n  const [dayTasks, setDayTasks] = useState([]);\r\n\r\n  const calendarRef = useRef(null);\r\n  const containerRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    const calendarApi = calendarRef.current.getApi();\r\n    if (!calendarPanelActive) {\r\n      calendarApi.today();\r\n    }\r\n    containerRef.current.scrollTo({\r\n      top: 0,\r\n      behavior: \"smooth\",\r\n    });\r\n  }, [calendarPanelActive, dayTasksPanelActive]);\r\n\r\n  const handleDateClick = (info) => {\r\n    const date = info.dateStr;\r\n    setClickedDate(date);\r\n    setDayTasks(tasks.filter((task) => task.date === date));\r\n    setDayTasksPanelActive(true);\r\n  };\r\n\r\n  useEffect(() => {\r\n    setDayTasks(tasks.filter((task) => task.date === clickedDate));\r\n  }, [tasks, clickedDate]);\r\n\r\n  const handleAddTaskCalendarBtn = () => {\r\n    setAddPanelActive(true);\r\n  };\r\n\r\n  const dayTasksElements = dayTasks.map((task) => (\r\n    <Task key={task.id} {...task} />\r\n  ));\r\n\r\n  const dayTasksElement = dayTasksPanelActive ? (\r\n    <>\r\n      <h1>{clickedDate}</h1>\r\n      {addPanelActive ? null : clickedDate >= todayDate ? (\r\n        <button\r\n          onClick={handleAddTaskCalendarBtn}\r\n          className=\"navButton light-color dayPanelAddButton\"\r\n        >\r\n          <FontAwesomeIcon icon={faPlusCircle} />\r\n        </button>\r\n      ) : null}\r\n\r\n      {dayTasks.length > 0 ? (\r\n        <ul className=\"tasksListContainer\">{dayTasksElements}</ul>\r\n      ) : clickedDate < todayDate ? (\r\n        <h1>\r\n          Nie można dodać zadania, lepiej nie planować zadań na przeszłość!\r\n        </h1>\r\n      ) : (\r\n        <h1>Nie masz zadań w tym dniu</h1>\r\n      )}\r\n    </>\r\n  ) : null;\r\n\r\n  const showOrHideDayTaskPanel = dayTasksPanelActive ? \"show\" : \"hide\";\r\n  const overFlow = dayTasksPanelActive ? \"overFlowHidden\" : \"\";\r\n\r\n  const showOrHidePanel = () => {\r\n    if (calendarPanelActive === false) {\r\n      return \"hide\";\r\n    } else if (calendarPanelActive === true) {\r\n      return \"show\";\r\n    } else {\r\n      return \"\";\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div\r\n      ref={containerRef}\r\n      className={`${showOrHidePanel()} ${overFlow} panelContainer`}\r\n    >\r\n      <ExitBtn func={setCalendarPanelActive} />\r\n      <div className={`${showOrHideDayTaskPanel} panelContainer`}>\r\n        <ExitBtn func={setDayTasksPanelActive} />\r\n        {dayTasksElement}\r\n      </div>\r\n      <div className=\"calendarContainer\">\r\n        <FullCalendar\r\n          ref={calendarRef}\r\n          dayMaxEventRows={false}\r\n          views={{\r\n            dayGridMonth: {\r\n              dayMaxEvents: 1,\r\n            },\r\n          }}\r\n          plugins={[dayGridPlugin, interactionPlugin]}\r\n          initialView=\"dayGridMonth\"\r\n          events={tasks}\r\n          dateClick={handleDateClick}\r\n          fixedWeekCount={false}\r\n          weekNumberCalculation=\"ISO\"\r\n          eventBackgroundColor=\"#d3cce3\"\r\n          eventBorderColor=\"transparent\"\r\n          contentHeight=\"auto\"\r\n          eventTextColor=\"black\"\r\n          headerToolbar={{\r\n            start: \"prev,next\",\r\n            center: \"title\",\r\n            end: \"today\",\r\n          }}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Calendar;\r\n","import { createContext, useEffect, useState } from \"react\";\r\nimport { faPlusCircle } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { faClipboardList } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { faCalendar } from \"@fortawesome/free-solid-svg-icons\";\r\nimport AddTask from \"./components/AddTask\";\r\nimport TasksList from \"./components/TasksList\";\r\nimport Calendar from \"./components/Calendar\";\r\n\r\nexport const AppContext = createContext();\r\n\r\nconst AppProvider = ({ children }) => {\r\n  const [addPanelActive, setAddPanelActive] = useState(null);\r\n  const [listPanelActive, setListPanelActive] = useState(null);\r\n  const [calendarPanelActive, setCalendarPanelActive] = useState(null);\r\n  const tzoffset = new Date().getTimezoneOffset() * 60000;\r\n  const localISOTime = new Date(Date.now() - tzoffset)\r\n    .toISOString()\r\n    .slice(0, -1)\r\n    .split(\"T\")[0];\r\n  const [todayDate, setTodayDate] = useState(localISOTime);\r\n  const sampleDate = (daysAdded) => {\r\n    const sampleDateTask = new Date(todayDate);\r\n    sampleDateTask.setDate(sampleDateTask.getDate() + daysAdded);\r\n    return sampleDateTask.toISOString().split(\"T\")[0];\r\n  };\r\n  const [tasks, setTasks] = useState([\r\n    {\r\n      id: \"KVN6479JPX6JI\",\r\n      title: \"Wynieść śmieci\",\r\n      date: todayDate,\r\n      description: \"Przykładowe zadanie 1\",\r\n    },\r\n    {\r\n      id: \"KVN6279JDX1WE\",\r\n      title: \"Umyć samochód\",\r\n      date: sampleDate(3),\r\n      description: \"Przykładowe zadanie 2\",\r\n    },\r\n    {\r\n      id: \"KVN6779GPW2JI\",\r\n      title: \"Zrobić trening\",\r\n      date: sampleDate(6),\r\n      description: \"Przykładowe zadanie 3\",\r\n    },\r\n    {\r\n      id: \"KVN647F5P46TI\",\r\n      title: \"Kolacja ze znajomymi\",\r\n      date: sampleDate(6),\r\n      description: \"Przykładowe zadanie 4\",\r\n    },\r\n    {\r\n      id: \"KEN247W5P46TI\",\r\n      title: \"Spacer\",\r\n      date: sampleDate(6),\r\n      description: \"Przykładowe zadanie 5\",\r\n    },\r\n  ]);\r\n  const [dayTasksPanelActive, setDayTasksPanelActive] = useState(false);\r\n  const [clickedDate, setClickedDate] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    if (todayDate < new Date().toISOString().split(\"T\")[0]) {\r\n      setTodayDate(new Date().toISOString().split(\"T\")[0]);\r\n    }\r\n  }, [todayDate, addPanelActive, listPanelActive, calendarPanelActive]);\r\n\r\n  const buttonTypes = [\r\n    {\r\n      id: 1,\r\n      type: \"add\",\r\n      icon: faPlusCircle,\r\n      component: <AddTask />,\r\n      active: addPanelActive,\r\n    },\r\n    {\r\n      id: 2,\r\n      type: \"list\",\r\n      icon: faClipboardList,\r\n      component: <TasksList />,\r\n      active: listPanelActive,\r\n    },\r\n    {\r\n      id: 3,\r\n      type: \"calendar\",\r\n      icon: faCalendar,\r\n      component: <Calendar />,\r\n      active: calendarPanelActive,\r\n    },\r\n  ];\r\n\r\n  const sortTasksFunc = (a, b) => {\r\n    const sortByTitle = () => {\r\n      if (a.title.toLowerCase() < b.title.toLowerCase()) {\r\n        return -1;\r\n      }\r\n      if (b.title.toLowerCase() < a.title.toLowerCase()) {\r\n        return 1;\r\n      }\r\n      return 0;\r\n    };\r\n    return new Date(a.date) - new Date(b.date) || sortByTitle();\r\n  };\r\n\r\n  useEffect(() => {\r\n    const tasksSort = tasks.sort((a, b) => sortTasksFunc(a, b));\r\n    setTasks(tasksSort);\r\n  }, [tasks]);\r\n\r\n  const handleDelateBtn = (id) => {\r\n    const tasksAfterDelate = tasks.filter((task) => task.id !== id);\r\n    setTasks(tasksAfterDelate);\r\n  };\r\n\r\n  const handleNavButtonClick = (type) => {\r\n    if (type) {\r\n      switch (type) {\r\n        case \"add\":\r\n          setListPanelActive(null);\r\n          setCalendarPanelActive(null);\r\n          return setAddPanelActive(true);\r\n        case \"list\":\r\n          setAddPanelActive(null);\r\n          setCalendarPanelActive(null);\r\n          return setListPanelActive(true);\r\n        case \"calendar\":\r\n          setAddPanelActive(null);\r\n          setListPanelActive(null);\r\n          return setCalendarPanelActive(true);\r\n        default:\r\n          return;\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleExitBtn = (func) => {\r\n    func(false);\r\n  };\r\n\r\n  return (\r\n    <AppContext.Provider\r\n      value={{\r\n        buttonTypes,\r\n        addPanelActive,\r\n        listPanelActive,\r\n        calendarPanelActive,\r\n        setListPanelActive,\r\n        setCalendarPanelActive,\r\n        setAddPanelActive,\r\n        sortTasksFunc,\r\n        tasks,\r\n        setTasks,\r\n        handleDelateBtn,\r\n        handleNavButtonClick,\r\n        dayTasksPanelActive,\r\n        setDayTasksPanelActive,\r\n        handleExitBtn,\r\n        clickedDate,\r\n        setClickedDate,\r\n        todayDate,\r\n      }}\r\n    >\r\n      {children}\r\n    </AppContext.Provider>\r\n  );\r\n};\r\n\r\nexport default AppProvider;\r\n","import { useContext } from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n\r\nimport { AppContext } from \"../AppContext\";\r\n\r\nconst NavButton = (navButton) => {\r\n  const { handleNavButtonClick } = useContext(AppContext);\r\n\r\n  return (\r\n    <div className=\"navButtonContainer\">\r\n      <button\r\n        onClick={() => handleNavButtonClick(navButton.type)}\r\n        className=\"navButton\"\r\n      >\r\n        <FontAwesomeIcon icon={navButton.icon} />\r\n      </button>\r\n      {navButton.component}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NavButton;\r\n","import { useContext } from \"react\";\r\nimport { AppContext } from \"../AppContext\";\r\nimport NavButton from \"./NavButton\";\r\n\r\nconst Navigation = () => {\r\n  const { buttonTypes } = useContext(AppContext);\r\n\r\n  const navButtons = buttonTypes.map((navButton) => (\r\n    <NavButton key={navButton.id} {...navButton} />\r\n  ));\r\n\r\n  return <nav className=\"navigation\">{navButtons}</nav>;\r\n};\r\n\r\nexport default Navigation;\r\n","import Navigation from \"./components/Navigation\";\n\nfunction App() {\n  window.onresize = () => {\n    document.body.height = window.innerHeight;\n    document.body.width = window.innerWidth;\n  };\n  window.onresize();\n\n  return (\n    <div className=\"container\">\n      <h1>Manager zadań</h1>\n      <Navigation />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport AppProvider from \"./AppContext\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nimport \"./sass/index.scss\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <AppProvider>\r\n      <App />\r\n    </AppProvider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}